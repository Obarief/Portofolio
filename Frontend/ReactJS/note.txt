-apakah tidak cukup pakai html dan css ? "agar ada standarisasi dalam 1 tim"
-komponen = kumpulan html elemen, koda js dan css = kode yg bisa digunakan secara independen = reusable = jsx (javascript xml) = 

?{
        export default function HelloWorld(){
        return(
            <>
                <h1>halo dunia</h1>
            </>
        )
        }
}penjelasan = 1 komponen bernama HelloWorld dan mengembalikan xml dengan menggunakan fragment dan di export

?{
        import {React, StrictMode} from 'react';
        import {createRoot} from 'react-dom/client';
        import HelloWorld from './HelloWorld.jsx';

        createRoot(document.getElementById('root')).render(
                <StrictMode>
                    <HelloWorld/>
                    <HelloWorld/>
                </StrictMode>
            )
}membuat render ke html menggunakan DOM , bisa digunakan berulang

?{
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Hello React</title>
        </head>
        <body>
            <div id="root"></div>
            <script type="module" src="./src/hello-world/main.jsx"></script>
        </body>
        </html>

}file htmlnya yang menjadi template filenya 

- 1 komponen 1 file = best practice
- multiple komponen dalam 1 file = bisa saja
- komponen  = function yang mengembalikan react elemen

=======================================================

*JSX = aturannya lebih ketat daripada html, beberapa element berberda dari html
    -aturan : 
        -hanya boleh mengembalikan 1 element
        -menutup tag element
        -camelCase

    -gunakan converter bisa ingin dari html ke jsx = jsx converter

*javascript di jsx = gunakan kurung kurawal = <h1>{text.toUpperCase()}</h1>
    -sebagai atribut juga bisa = <img src={path}/>
    -js object menggunakan kurung kurawal double
        -contoh: <h1 style={{color=red}}>{text.toUpperCase()}<h1/>
            {} 1 = sebagai object
            {} 2 = sebagai isi dari objectnya yang berupa js

=======================================================

*props = untuk berkomunikasi, bisa mengirim array, function dll
    -untuk menambahkan props = tambahkan 1 parameter = bentuknya object
    -tambahkan atribut pada import function sesuai dengan atribut yang dibuat sebelumnya 

=======================================================

*spread atribut = untuk mengeluarkan semua atribut yang dimiliki oleh suatu variabel, jika ingin di keluarkan semuanya namun tidak ingin 1 per 1 (contoh = props.text, props.number) = bisa dengan {...props}

=======================================================

nested component = membuat callback dengan children = dan harus children

=======================================================


style = import css

=======================================================

conditional = jika ada yang terdelete maka kembalikan null, jika ada dan sudah dipelajari coret, jika belum kembalikan teks asalnya

biasanya menggunakan logika AND {isComplete && 'âœ…'}

=======================================================

collection component = (membutuhkan unique key props) sebagai pembeda dari data yang lain untuk react mengetahui ketika ada perubahan pada suatu props pada salah 1 datanya dalam props


=======================================================
BEST PRACTICE

pure component = sama seperti pure function
    terdapat 2 kriteria yaitu:
        -mengembalikan nilai sama untuk parameter yang sama
        -tidak memiliki efek samping ke variabel non local (artinya tetap pada scope function saja)

jika kita membuat counter yang tidak pure maka akan menunjukkan angka kelipatan 2 karena fitur dari <StrictMode> = yaitu merender 2x sehingga counter menjadi kelipatan 2.

solusinya adalah counter/id menjadi di parameter di samping text (memberi nilai absolut menjadi string di pemakaiannya)

jika ingin tetap ada efek samping maka ada fungsi namanya event handler -->

=======================================================

event handler = membuat custom event handler
    props sebuah object
        event handler bisa menjadi props, karena props bisa berisi object 

=======================================================

event object = event object dari apa yang kita click (fungsi maupun elemen)

=======================================================

event propagation = seperti penyebaran, jika kita stopPropagation maka child event tidak akan menyebar ke event parent

event propagation = jika fungsi yang digunakan sama seperti parentnnya, namun tidak ingin parentnya kena eventnya jika child di event, maka gunakan event.stopPropagation(), agar hanya menghandle (button) yang di klik pada childnya 

<div onClick={onClick}>
            <button onClick={onClick}>First</button>
            <button onClick={onClick}>Second</button>
</div>

*penjelasan = div memiliki onClick dan button juga memiliki onClick, jika kita tidak pakai event.stopPropagation(); maka handler akan mengeksekusi 2x yaitu tombol pada child yang kita klik dan "event tombol" pada parent divnya 

karena sebenarnya jika kita klik divnya walau tidak ada button maka akan ter handle juga 

sama seperti event prevent default pada js = sebagai rem bagi form untuk tidak melakukan event built-in yang ada, agar ketika di submit tidak refresh halaman dan dapat kita cek dahulu datanya

=======================================================

side effect = mengubah elemen di luar function

DOM tidak direkomendasikan karena percuma memakai react


maka gunakan state -->

=======================================================

Hooks = fitur yang dapat digunakan didalam react

=======================================================

state = mirip variabel namun dapat dirender ulang

kalau variabel biasa maka perlu tahap yang panjang dengan DOM

useState = megembalikan 2 nilai yaitu state dan setstate 

counter = angka yang tersimpan
setcounter = untuk memberi tahu react bahwa ada perubahan pada counter

counter bersifat private dan terisolasi = sehingga ketika kita memanggil lagi counternya maka itu terpisah mempunyai perhitungannya sendiri"

=======================================================

render = memanggil component yang dibuat
    1. memicu proses render
    2. melakukan proses render
    3. menempatkan hasil render ke DOM

        memicu =
            1. inisialisasi awal pada root DOM
            2. ketika ada perubahan
           
        render = 
            1. pada inisialisasi awal pada root
            2. memberi perubahan pada state yang berubah
            3. render selesai maka react melakukan commit

        commit = 
            1. proses pertama saja = akan appenChild() untuk DOMnya 
            2. untuk render ulang menyamakan DOM dengan hasil rendering = itulah penyebab react dapat membedakan component mana yang berubah walau componentnya sama